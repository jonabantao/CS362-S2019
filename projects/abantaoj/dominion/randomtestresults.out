Random Test: Village Card
....X.......................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
................X...........................................
............................................................
............................................................
598 out of 600 tests passed.

Random Test: Great Hall Card
....X.......................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
................X...........................................
............................................................
............................................................
598 out of 600 tests passed.

Random Test: Adventurer Card
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXX
XXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
XXX.XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXX.
XXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXX
XX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXX.XXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXX.X.XXXXXXXXXX
XXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXX..XXXXXX
22 out of 600 tests passed.

File 'dominion.c'
Lines executed:25.66% of 604
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    71359:    8:int compare(const void* a, const void* b) {
    71359:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    71359:   11:  if (*(int*)a < *(int*)b)
    18148:   12:    return -1;
    53211:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     1800:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1800:   44:  SelectStream(1);
     1800:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     1800:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1800:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    19800:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   198000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   180000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1800:   73:  if (numPlayers == 2)
        -:   74:    {
      863:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      937:   77:  else if (numPlayers == 3)
        -:   78:    {
      937:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1800:   87:  if (numPlayers == 2)
        -:   88:    {
      863:   89:      state->supplyCount[estate] = 8;
      863:   90:      state->supplyCount[duchy] = 8;
      863:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      937:   95:      state->supplyCount[estate] = 12;
      937:   96:      state->supplyCount[duchy] = 12;
      937:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1800:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1800:  102:  state->supplyCount[silver] = 40;
     1800:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    37800:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   297000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   279000:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    18000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     3600:  115:		  if (numPlayers == 2){ 
      863:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      937:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    16200:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    18000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   261000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     6337:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     4537:  140:      state->deckCount[i] = 0;
    18148:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    13611:  143:	  state->deck[i][j] = estate;
    13611:  144:	  state->deckCount[i]++;
        -:  145:	}
    36296:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    31759:  148:	  state->deck[i][j] = copper;
    31759:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     6337:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     4537:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     6337:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     4537:  166:      state->handCount[i] = 0;
     4537:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    50400:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    48600:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1800:  182:  state->outpostPlayed = 0;
     1800:  183:  state->phase = 0;
     1800:  184:  state->numActions = 1;
     1800:  185:  state->numBuys = 1;
     1800:  186:  state->playedCardCount = 0;
     1800:  187:  state->whoseTurn = 0;
     1800:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    10800:  192:  for (it = 0; it < 5; it++){
     9000:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     1800:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1800:  198:  return 0;
        -:  199:}
        -:  200:
     5441:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     5441:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     5441:  209:  if (state->deckCount[player] < 1)
      900:  210:    return -1;
     4541:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    55330:  214:  while (state->deckCount[player] > 0) {
    46248:  215:    card = floor(Random() * state->deckCount[player]);
    46248:  216:    newDeck[newDeckPos] = state->deck[player][card];
    46248:  217:    newDeckPos++;
   207717:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   161469:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    46248:  221:    state->deckCount[player]--;
        -:  222:  }
    50789:  223:  for (i = 0; i < newDeckPos; i++) {
    46248:  224:    state->deck[player][i] = newDeck[i];
    46248:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4541:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      600:  346:int whoseTurn(struct gameState *state) {
      600:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    13376:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    13376:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1332:  533:    for (i = 0; i < state->discardCount[player];i++){
      878:  534:      state->deck[player][i] = state->discard[player][i];
      878:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      454:  538:    state->deckCount[player] = state->discardCount[player];
      454:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      454:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
      454:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      454:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
      454:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      454:  559:    if (deckCounter == 0)
      450:  560:      return -1;
        -:  561:
        4:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  563:    state->deckCount[player]--;
        4:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    12922:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    12922:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    12922:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    12922:  576:    state->deckCount[player]--;
    12922:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    12926:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
    #####:  587:    case curse:
    #####:  588:      return 0;
    #####:  589:    case estate:
    #####:  590:      return 2;
    #####:  591:    case duchy:
    #####:  592:      return 5;
    #####:  593:    case province:
    #####:  594:      return 8;
    #####:  595:    case copper:
    #####:  596:      return 0;
    #####:  597:    case silver:
    #####:  598:      return 3;
    #####:  599:    case gold:
    #####:  600:      return 6;
    #####:  601:    case adventurer:
    #####:  602:      return 6;
    #####:  603:    case council_room:
    #####:  604:      return 5;
    #####:  605:    case feast:
    #####:  606:      return 4;
    #####:  607:    case gardens:
    #####:  608:      return 4;
    #####:  609:    case mine:
    #####:  610:      return 5;
    #####:  611:    case remodel:
    #####:  612:      return 4;
    #####:  613:    case smithy:
    #####:  614:      return 4;
    #####:  615:    case village:
    #####:  616:      return 3;
    #####:  617:    case baron:
    #####:  618:      return 4;
    #####:  619:    case great_hall:
    #####:  620:      return 3;
    #####:  621:    case minion:
    #####:  622:      return 5;
    #####:  623:    case steward:
    #####:  624:      return 3;
    #####:  625:    case tribute:
    #####:  626:      return 5;
    #####:  627:    case ambassador:
    #####:  628:      return 3;
    #####:  629:    case cutpurse:
    #####:  630:      return 4;
    #####:  631:    case embargo: 
    #####:  632:      return 2;
    #####:  633:    case outpost:
    #####:  634:      return 5;
    #####:  635:    case salvager:
    #####:  636:      return 4;
    #####:  637:    case sea_hag:
    #####:  638:      return 4;
    #####:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      600:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      600:  653:  int currentPlayer = whoseTurn(state);
      600:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      600:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      600:  658:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:  
        -:  662:	
        -:  663:  //uses switch to select card and perform actions
      600:  664:  switch( card ) 
        -:  665:    {
    #####:  666:    case adventurer:
    #####:  667:      return playAdventurerCard(currentPlayer, state);
        -:  668:			
    #####:  669:    case council_room:
    #####:  670:      return playCouncilRoomCard(currentPlayer, state, handPos);
        -:  671:
    #####:  672:    case feast:
        -:  673:      //gain card with cost up to 5
        -:  674:      //Backup hand
    #####:  675:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  676:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  677:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  678:      }
        -:  679:      //Backup hand
        -:  680:
        -:  681:      //Update Coins for Buy
    #####:  682:      updateCoins(currentPlayer, state, 5);
    #####:  683:      x = 1;//Condition to loop on
    #####:  684:      while( x == 1) {//Buy one card
    #####:  685:	if (supplyCount(choice1, state) <= 0){
        -:  686:	  if (DEBUG)
        -:  687:	    printf("None of that card left, sorry!\n");
        -:  688:
        -:  689:	  if (DEBUG){
        -:  690:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  691:	  }
        -:  692:	}
    #####:  693:	else if (state->coins < getCost(choice1)){
    #####:  694:	  printf("That card is too expensive!\n");
        -:  695:
        -:  696:	  if (DEBUG){
        -:  697:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  698:	  }
        -:  699:	}
        -:  700:	else{
        -:  701:
        -:  702:	  if (DEBUG){
        -:  703:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  704:	  }
        -:  705:
    #####:  706:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  707:	  x = 0;//No more buying cards
        -:  708:
        -:  709:	  if (DEBUG){
        -:  710:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  711:	  }
        -:  712:
        -:  713:	}
        -:  714:      }     
        -:  715:
        -:  716:      //Reset Hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  718:	state->hand[currentPlayer][i] = temphand[i];
    #####:  719:	temphand[i] = -1;
        -:  720:      }
        -:  721:      //Reset Hand
        -:  722:      			
    #####:  723:      return 0;
        -:  724:			
    #####:  725:    case gardens:
    #####:  726:      return -1;
        -:  727:			
    #####:  728:    case mine:
    #####:  729:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  730:
    #####:  731:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  732:	{
    #####:  733:	  return -1;
        -:  734:	}
        -:  735:		
    #####:  736:      if (choice2 > treasure_map || choice2 < curse)
        -:  737:	{
    #####:  738:	  return -1;
        -:  739:	}
        -:  740:
    #####:  741:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  742:	{
    #####:  743:	  return -1;
        -:  744:	}
        -:  745:
    #####:  746:      gainCard(choice2, state, 2, currentPlayer);
        -:  747:
        -:  748:      //discard card from hand
    #####:  749:      discardCard(handPos, currentPlayer, state, 0);
        -:  750:
        -:  751:      //discard trashed card
    #####:  752:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  753:	{
    #####:  754:	  if (state->hand[currentPlayer][i] == j)
        -:  755:	    {
    #####:  756:	      discardCard(i, currentPlayer, state, 0);			
    #####:  757:	      break;
        -:  758:	    }
        -:  759:	}
        -:  760:			
    #####:  761:      return 0;
        -:  762:			
    #####:  763:    case remodel:
    #####:  764:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  765:
    #####:  766:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      gainCard(choice2, state, 0, currentPlayer);
        -:  772:
        -:  773:      //discard card from hand
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
        -:  776:      //discard trashed card
    #####:  777:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  778:	{
    #####:  779:	  if (state->hand[currentPlayer][i] == j)
        -:  780:	    {
    #####:  781:	      discardCard(i, currentPlayer, state, 0);			
    #####:  782:	      break;
        -:  783:	    }
        -:  784:	}
        -:  785:
        -:  786:
    #####:  787:      return 0;
        -:  788:		
    #####:  789:    case smithy:
    #####:  790:      return playSmithyCard(currentPlayer, state, handPos);
        -:  791:		
      600:  792:    case village:
        -:  793:      //+1 Card
      600:  794:      drawCard(currentPlayer, state);
        -:  795:			
        -:  796:      //+2 Actions
      600:  797:      state->numActions = state->numActions + 2;
        -:  798:			
        -:  799:      //discard played card from hand
      600:  800:      discardCard(handPos, currentPlayer, state, 0);
      600:  801:      return 0;
        -:  802:		
    #####:  803:    case baron:
    #####:  804:      state->numBuys++;//Increase buys by 1!
    #####:  805:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  806:	int p = 0;//Iterator for hand!
    #####:  807:	int card_not_discarded = 1;//Flag for discard set!
    #####:  808:	while(card_not_discarded){
    #####:  809:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  810:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  811:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  812:	    state->discardCount[currentPlayer]++;
    #####:  813:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  814:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  815:	    }
    #####:  816:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  817:	    state->handCount[currentPlayer]--;
    #####:  818:	    card_not_discarded = 0;//Exit the loop
        -:  819:	  }
    #####:  820:	  else if (p > state->handCount[currentPlayer]){
        -:  821:	    if(DEBUG) {
        -:  822:	      printf("No estate cards in your hand, invalid choice\n");
        -:  823:	      printf("Must gain an estate if there are any\n");
        -:  824:	    }
    #####:  825:	    if (supplyCount(estate, state) > 0){
    #####:  826:	      gainCard(estate, state, 0, currentPlayer);
    #####:  827:	      state->supplyCount[estate]--;//Decrement estates
    #####:  828:	      if (supplyCount(estate, state) == 0){
    #####:  829:		isGameOver(state);
        -:  830:	      }
        -:  831:	    }
    #####:  832:	    card_not_discarded = 0;//Exit the loop
        -:  833:	  }
        -:  834:			    
        -:  835:	  else{
    #####:  836:	    p++;//Next card
        -:  837:	  }
        -:  838:	}
        -:  839:      }
        -:  840:			    
        -:  841:      else{
    #####:  842:	if (supplyCount(estate, state) > 0){
    #####:  843:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  844:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  845:	  if (supplyCount(estate, state) == 0){
    #####:  846:	    isGameOver(state);
        -:  847:	  }
        -:  848:	}
        -:  849:      }
        -:  850:	    
        -:  851:      
    #####:  852:      return 0;
        -:  853:		
    #####:  854:    case great_hall:
    #####:  855:      playGreatHallCard(currentPlayer, state, handPos);
        -:  856:
        -:  857:		
    #####:  858:    case minion:
        -:  859:      //+1 action
    #####:  860:      state->numActions++;
        -:  861:			
        -:  862:      //discard card from hand
    #####:  863:      discardCard(handPos, currentPlayer, state, 0);
        -:  864:			
    #####:  865:      if (choice1)		//+2 coins
        -:  866:	{
    #####:  867:	  state->coins = state->coins + 2;
        -:  868:	}
        -:  869:			
    #####:  870:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  871:	{
        -:  872:	  //discard hand
    #####:  873:	  while(numHandCards(state) > 0)
        -:  874:	    {
    #####:  875:	      discardCard(handPos, currentPlayer, state, 0);
        -:  876:	    }
        -:  877:				
        -:  878:	  //draw 4
    #####:  879:	  for (i = 0; i < 4; i++)
        -:  880:	    {
    #####:  881:	      drawCard(currentPlayer, state);
        -:  882:	    }
        -:  883:				
        -:  884:	  //other players discard hand and redraw if hand size > 4
    #####:  885:	  for (i = 0; i < state->numPlayers; i++)
        -:  886:	    {
    #####:  887:	      if (i != currentPlayer)
        -:  888:		{
    #####:  889:		  if ( state->handCount[i] > 4 )
        -:  890:		    {
        -:  891:		      //discard hand
    #####:  892:		      while( state->handCount[i] > 0 )
        -:  893:			{
    #####:  894:			  discardCard(handPos, i, state, 0);
        -:  895:			}
        -:  896:							
        -:  897:		      //draw 4
    #####:  898:		      for (j = 0; j < 4; j++)
        -:  899:			{
    #####:  900:			  drawCard(i, state);
        -:  901:			}
        -:  902:		    }
        -:  903:		}
        -:  904:	    }
        -:  905:				
        -:  906:	}
    #####:  907:      return 0;
        -:  908:		
    #####:  909:    case steward:
    #####:  910:      if (choice1 == 1)
        -:  911:	{
        -:  912:	  //+2 cards
    #####:  913:	  drawCard(currentPlayer, state);
    #####:  914:	  drawCard(currentPlayer, state);
        -:  915:	}
    #####:  916:      else if (choice1 == 2)
        -:  917:	{
        -:  918:	  //+2 coins
    #####:  919:	  state->coins = state->coins + 2;
        -:  920:	}
        -:  921:      else
        -:  922:	{
        -:  923:	  //trash 2 cards in hand
    #####:  924:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  925:	  discardCard(choice3, currentPlayer, state, 1);
        -:  926:	}
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
    #####:  932:    case tribute:
    #####:  933:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  934:	if (state->deckCount[nextPlayer] > 0){
    #####:  935:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  936:	  state->deckCount[nextPlayer]--;
        -:  937:	}
    #####:  938:	else if (state->discardCount[nextPlayer] > 0){
    #####:  939:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  940:	  state->discardCount[nextPlayer]--;
        -:  941:	}
        -:  942:	else{
        -:  943:	  //No Card to Reveal
        -:  944:	  if (DEBUG){
        -:  945:	    printf("No cards to reveal\n");
        -:  946:	  }
        -:  947:	}
        -:  948:      }
        -:  949:	    
        -:  950:      else{
    #####:  951:	if (state->deckCount[nextPlayer] == 0){
    #####:  952:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  953:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  954:	    state->deckCount[nextPlayer]++;
    #####:  955:	    state->discard[nextPlayer][i] = -1;
    #####:  956:	    state->discardCount[nextPlayer]--;
        -:  957:	  }
        -:  958:			    
    #####:  959:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  960:	} 
    #####:  961:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  962:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  963:	state->deckCount[nextPlayer]--;
    #####:  964:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  965:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  966:	state->deckCount[nextPlayer]--;
        -:  967:      }    
        -:  968:		       
    #####:  969:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  970:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  971:	state->playedCardCount++;
    #####:  972:	tributeRevealedCards[1] = -1;
        -:  973:      }
        -:  974:
    #####:  975:      for (i = 0; i <= 2; i ++){
    #####:  976:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  977:	  state->coins += 2;
        -:  978:	}
        -:  979:		    
    #####:  980:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  981:	  drawCard(currentPlayer, state);
    #####:  982:	  drawCard(currentPlayer, state);
        -:  983:	}
        -:  984:	else{//Action Card
    #####:  985:	  state->numActions = state->numActions + 2;
        -:  986:	}
        -:  987:      }
        -:  988:	    
    #####:  989:      return 0;
        -:  990:		
    #####:  991:    case ambassador:
    #####:  992:      j = 0;		//used to check if player has enough cards to discard
        -:  993:
    #####:  994:      if (choice2 > 2 || choice2 < 0)
        -:  995:	{
    #####:  996:	  return -1;				
        -:  997:	}
        -:  998:
    #####:  999:      if (choice1 == handPos)
        -: 1000:	{
    #####: 1001:	  return -1;
        -: 1002:	}
        -: 1003:
    #####: 1004:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1005:	{
    #####: 1006:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1007:	    {
    #####: 1008:	      j++;
        -: 1009:	    }
        -: 1010:	}
    #####: 1011:      if (j < choice2)
        -: 1012:	{
    #####: 1013:	  return -1;				
        -: 1014:	}
        -: 1015:
        -: 1016:      if (DEBUG) 
        -: 1017:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1018:
        -: 1019:      //increase supply count for choosen card by amount being discarded
    #####: 1020:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1021:			
        -: 1022:      //each other player gains a copy of revealed card
    #####: 1023:      for (i = 0; i < state->numPlayers; i++)
        -: 1024:	{
    #####: 1025:	  if (i != currentPlayer)
        -: 1026:	    {
    #####: 1027:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1028:	    }
        -: 1029:	}
        -: 1030:
        -: 1031:      //discard played card from hand
    #####: 1032:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1033:
        -: 1034:      //trash copies of cards returned to supply
    #####: 1035:      for (j = 0; j < choice2; j++)
        -: 1036:	{
    #####: 1037:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1038:	    {
    #####: 1039:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1040:		{
    #####: 1041:		  discardCard(i, currentPlayer, state, 1);
    #####: 1042:		  break;
        -: 1043:		}
        -: 1044:	    }
        -: 1045:	}			
        -: 1046:
    #####: 1047:      return 0;
        -: 1048:		
    #####: 1049:    case cutpurse:
        -: 1050:
    #####: 1051:      updateCoins(currentPlayer, state, 2);
    #####: 1052:      for (i = 0; i < state->numPlayers; i++)
        -: 1053:	{
    #####: 1054:	  if (i != currentPlayer)
        -: 1055:	    {
    #####: 1056:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1057:		{
    #####: 1058:		  if (state->hand[i][j] == copper)
        -: 1059:		    {
    #####: 1060:		      discardCard(j, i, state, 0);
    #####: 1061:		      break;
        -: 1062:		    }
    #####: 1063:		  if (j == state->handCount[i])
        -: 1064:		    {
    #####: 1065:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1066:			{
        -: 1067:			  if (DEBUG)
        -: 1068:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1069:			}	
    #####: 1070:		      break;
        -: 1071:		    }		
        -: 1072:		}
        -: 1073:					
        -: 1074:	    }
        -: 1075:				
        -: 1076:	}				
        -: 1077:
        -: 1078:      //discard played card from hand
    #####: 1079:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1080:
    #####: 1081:      return 0;
        -: 1082:
        -: 1083:		
    #####: 1084:    case embargo: 
        -: 1085:      //+2 Coins
    #####: 1086:      state->coins = state->coins + 2;
        -: 1087:			
        -: 1088:      //see if selected pile is in play
    #####: 1089:      if ( state->supplyCount[choice1] == -1 )
        -: 1090:	{
    #####: 1091:	  return -1;
        -: 1092:	}
        -: 1093:			
        -: 1094:      //add embargo token to selected supply pile
    #####: 1095:      state->embargoTokens[choice1]++;
        -: 1096:			
        -: 1097:      //trash card
    #####: 1098:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1099:      return 0;
        -: 1100:		
    #####: 1101:    case outpost:
        -: 1102:      //set outpost flag
    #####: 1103:      state->outpostPlayed++;
        -: 1104:			
        -: 1105:      //discard card
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1107:      return 0;
        -: 1108:		
    #####: 1109:    case salvager:
    #####: 1110:      return playSalvagerCard(currentPlayer, state, handPos, choice1);
        -: 1111:		
    #####: 1112:    case sea_hag:
    #####: 1113:      for (i = 0; i < state->numPlayers; i++){
    #####: 1114:	if (i != currentPlayer){
    #####: 1115:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1116:	  state->discardCount[i]++;
    #####: 1117:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1118:	}
        -: 1119:      }
    #####: 1120:      return 0;
        -: 1121:		
    #####: 1122:    case treasure_map:
        -: 1123:      //search hand for another treasure_map
    #####: 1124:      index = -1;
    #####: 1125:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1126:	{
    #####: 1127:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1128:	    {
    #####: 1129:	      index = i;
    #####: 1130:	      break;
        -: 1131:	    }
        -: 1132:	}
    #####: 1133:      if (index > -1)
        -: 1134:	{
        -: 1135:	  //trash both treasure cards
    #####: 1136:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1137:	  discardCard(index, currentPlayer, state, 1);
        -: 1138:
        -: 1139:	  //gain 4 Gold cards
    #####: 1140:	  for (i = 0; i < 4; i++)
        -: 1141:	    {
    #####: 1142:	      gainCard(gold, state, 1, currentPlayer);
        -: 1143:	    }
        -: 1144:				
        -: 1145:	  //return success
    #####: 1146:	  return 1;
        -: 1147:	}
        -: 1148:			
        -: 1149:      //no second treasure_map found in hand
    #####: 1150:      return -1;
        -: 1151:    }
        -: 1152:	
    #####: 1153:  return -1;
        -: 1154:}
        -: 1155:
     1200: 1156:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1157:{
        -: 1158:	
        -: 1159:  //if card is not trashed, added to Played pile 
     1200: 1160:  if (trashFlag < 1)
        -: 1161:    {
        -: 1162:      //add card to played pile
     1200: 1163:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1200: 1164:      state->playedCardCount++;
        -: 1165:    }
        -: 1166:	
        -: 1167:  //set played card to -1
     1200: 1168:  state->hand[currentPlayer][handPos] = -1;
        -: 1169:	
        -: 1170:  //remove card from player's hand
     1200: 1171:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1172:    {
        -: 1173:      //reduce number of cards in hand
        2: 1174:      state->handCount[currentPlayer]--;
        -: 1175:    }
     1198: 1176:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1177:    {
        -: 1178:      //reduce number of cards in hand
        6: 1179:      state->handCount[currentPlayer]--;
        -: 1180:    }
        -: 1181:  else 	
        -: 1182:    {
        -: 1183:      //replace discarded card with last card in hand
     1192: 1184:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1185:      //set last card to -1
     1192: 1186:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1187:      //reduce number of cards in hand
     1192: 1188:      state->handCount[currentPlayer]--;
        -: 1189:    }
        -: 1190:	
     1200: 1191:  return 0;
        -: 1192:}
        -: 1193:
    #####: 1194:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1195:{
        -: 1196:  //Note: supplyPos is enum of choosen card
        -: 1197:	
        -: 1198:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1199:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1200:    {
    #####: 1201:      return -1;
        -: 1202:    }
        -: 1203:	
        -: 1204:  //added card for [whoseTurn] current player:
        -: 1205:  // toFlag = 0 : add to discard
        -: 1206:  // toFlag = 1 : add to deck
        -: 1207:  // toFlag = 2 : add to hand
        -: 1208:
    #####: 1209:  if (toFlag == 1)
        -: 1210:    {
    #####: 1211:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1212:      state->deckCount[player]++;
        -: 1213:    }
    #####: 1214:  else if (toFlag == 2)
        -: 1215:    {
    #####: 1216:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1217:      state->handCount[player]++;
        -: 1218:    }
        -: 1219:  else
        -: 1220:    {
    #####: 1221:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1222:      state->discardCount[player]++;
        -: 1223:    }
        -: 1224:	
        -: 1225:  //decrease number in supply pile
    #####: 1226:  state->supplyCount[supplyPos]--;
        -: 1227:	 
    #####: 1228:  return 0;
        -: 1229:}
        -: 1230:
     1800: 1231:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1232:{
        -: 1233:  int i;
        -: 1234:	
        -: 1235:  //reset coin count
     1800: 1236:  state->coins = 0;
        -: 1237:
        -: 1238:  //add coins for each Treasure card in player's hand
    10800: 1239:  for (i = 0; i < state->handCount[player]; i++)
        -: 1240:    {
     9000: 1241:      if (state->hand[player][i] == copper)
        -: 1242:	{
     6940: 1243:	  state->coins += 1;
        -: 1244:	}
     2060: 1245:      else if (state->hand[player][i] == silver)
        -: 1246:	{
    #####: 1247:	  state->coins += 2;
        -: 1248:	}
     2060: 1249:      else if (state->hand[player][i] == gold)
        -: 1250:	{
    #####: 1251:	  state->coins += 3;
        -: 1252:	}	
        -: 1253:    }	
        -: 1254:
        -: 1255:  //add bonus
     1800: 1256:  state->coins += bonus;
        -: 1257:
     1800: 1258:  return 0;
        -: 1259:}
        -: 1260:
        -: 1261:// Helper functions - Play selected card
      600: 1262:int playAdventurerCard(int currentPlayer, struct gameState *state)
        -: 1263:{
      600: 1264:    int drawntreasure = 0;
        -: 1265:    int cardDrawn;
        -: 1266:    int temphand[MAX_HAND];
      600: 1267:    int z = 0; // this is the coutner for the temp hand;
        -: 1268:
     4376: 1269:    while (drawntreasure <= 2)
        -: 1270:    {
     3176: 1271:        if (state->deckCount[currentPlayer] < 1)
        -: 1272:        { //if the deck is empty we need to shuffle discard and add to deck
      450: 1273:            shuffle(currentPlayer, state);
        -: 1274:        }
     3176: 1275:        drawCard(currentPlayer, state);
     3176: 1276:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
     3176: 1277:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     1800: 1278:            drawntreasure++;
        -: 1279:        else
        -: 1280:        {
     1376: 1281:            temphand[z] = cardDrawn;
     1376: 1282:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1283:        }
        -: 1284:    }
     1200: 1285:    while (z - 1 >= 0)
        -: 1286:    {
    #####: 1287:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1288:        z = z - 1;
        -: 1289:    }
      600: 1290:    return 0;
        -: 1291:}
        -: 1292:
    #####: 1293:int playSmithyCard(int currentPlayer, struct gameState* state, int handPos)
        -: 1294:{
        -: 1295:  //+3 Cards
    #####: 1296:  for (int i = 0; i < 3; i++)
        -: 1297:  {
    #####: 1298:    drawCard(currentPlayer, state);
        -: 1299:  }
        -: 1300:
        -: 1301:  //discard card from hand
    #####: 1302:  discardCard(handPos, currentPlayer, state, 1);
    #####: 1303:  return 0;
        -: 1304:}
        -: 1305:
    #####: 1306:int playCouncilRoomCard(int currentPlayer, struct gameState *state, int handPos)
        -: 1307:{
        -: 1308:  //+4 Cards
    #####: 1309:  for (int i = 0; i < 4; i++)
        -: 1310:  {
    #####: 1311:    drawCard(currentPlayer, state);
        -: 1312:  }
        -: 1313:
        -: 1314:
        -: 1315:  //Each other player draws a card
    #####: 1316:  for (int i = 0; i < state->numPlayers; i++)
        -: 1317:  {
        -: 1318:    //+1 Buy
    #####: 1319:    state->numBuys++;
        -: 1320:
    #####: 1321:    if (i != currentPlayer)
        -: 1322:    {
    #####: 1323:      drawCard(i, state);
        -: 1324:    }
        -: 1325:  }
        -: 1326:
        -: 1327:  //put played card in played card pile
    #####: 1328:  discardCard(handPos, currentPlayer, state, 0);
        -: 1329:
    #####: 1330:  return 0;
        -: 1331:}
        -: 1332:
      600: 1333:int playGreatHallCard(int currentPlayer, struct gameState *state, int handPos)
        -: 1334:{
        -: 1335:  //+1 Card
      600: 1336:  drawCard(currentPlayer, state);
        -: 1337:
        -: 1338:  //+1 Actions
      600: 1339:  state->numActions++;
        -: 1340:
        -: 1341:  //discard card from hand
      600: 1342:  discardCard(handPos, currentPlayer, state, 0);
      600: 1343:  return 0;
        -: 1344:}
        -: 1345:
    #####: 1346:int playSalvagerCard(int currentPlayer, struct gameState *state, int handPos, int choice)
        -: 1347:{
        -: 1348:  //+1 buy
    #####: 1349:  state->numBuys++;
        -: 1350:
    #####: 1351:  if (choice)
        -: 1352:  {
        -: 1353:    //gain coins equal to trashed card
    #####: 1354:    state->coins = state->coins + getCost(handCard(choice, state));
        -: 1355:    //trash card
    #####: 1356:    discardCard(choice, currentPlayer, state, 1);
        -: 1357:  }
        -: 1358:
        -: 1359:  //discard card
    #####: 1360:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1361:  return 0;
        -: 1362:}
        -: 1363:
        -: 1364:
        -: 1365://end of dominion.c
        -: 1366:
